// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_PLAYER_COMMAND: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_PLAYER_COMMAND: u8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_PLAYER_COMMAND: [PlayerCommand; 3] = [
  PlayerCommand::Move_right,
  PlayerCommand::Move_left,
  PlayerCommand::Jump,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct PlayerCommand(pub u8);
#[allow(non_upper_case_globals)]
impl PlayerCommand {
  pub const Move_right: Self = Self(0);
  pub const Move_left: Self = Self(1);
  pub const Jump: Self = Self(2);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Move_right,
    Self::Move_left,
    Self::Jump,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Move_right => Some("Move_right"),
      Self::Move_left => Some("Move_left"),
      Self::Jump => Some("Jump"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for PlayerCommand {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for PlayerCommand {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for PlayerCommand {
    type Output = PlayerCommand;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for PlayerCommand {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for PlayerCommand {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for PlayerCommand {}
pub enum PlayerCommandsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PlayerCommands<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PlayerCommands<'a> {
  type Inner = PlayerCommands<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PlayerCommands<'a> {
  pub const VT_SEQUENCE: flatbuffers::VOffsetT = 4;
  pub const VT_DT_SEC: flatbuffers::VOffsetT = 6;
  pub const VT_COMMANDS: flatbuffers::VOffsetT = 8;
  pub const VT_CLIENT_TIMESTAMP: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PlayerCommands { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PlayerCommandsArgs<'args>
  ) -> flatbuffers::WIPOffset<PlayerCommands<'bldr>> {
    let mut builder = PlayerCommandsBuilder::new(_fbb);
    builder.add_client_timestamp(args.client_timestamp);
    if let Some(x) = args.commands { builder.add_commands(x); }
    builder.add_dt_sec(args.dt_sec);
    builder.add_sequence(args.sequence);
    builder.finish()
  }


  #[inline]
  pub fn sequence(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(PlayerCommands::VT_SEQUENCE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn dt_sec(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(PlayerCommands::VT_DT_SEC, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn commands(&self) -> Option<flatbuffers::Vector<'a, PlayerCommand>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, PlayerCommand>>>(PlayerCommands::VT_COMMANDS, None)}
  }
  #[inline]
  pub fn client_timestamp(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(PlayerCommands::VT_CLIENT_TIMESTAMP, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for PlayerCommands<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("sequence", Self::VT_SEQUENCE, false)?
     .visit_field::<f32>("dt_sec", Self::VT_DT_SEC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, PlayerCommand>>>("commands", Self::VT_COMMANDS, false)?
     .visit_field::<f32>("client_timestamp", Self::VT_CLIENT_TIMESTAMP, false)?
     .finish();
    Ok(())
  }
}
pub struct PlayerCommandsArgs<'a> {
    pub sequence: u32,
    pub dt_sec: f32,
    pub commands: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, PlayerCommand>>>,
    pub client_timestamp: f32,
}
impl<'a> Default for PlayerCommandsArgs<'a> {
  #[inline]
  fn default() -> Self {
    PlayerCommandsArgs {
      sequence: 0,
      dt_sec: 0.0,
      commands: None,
      client_timestamp: 0.0,
    }
  }
}

pub struct PlayerCommandsBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PlayerCommandsBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_sequence(&mut self, sequence: u32) {
    self.fbb_.push_slot::<u32>(PlayerCommands::VT_SEQUENCE, sequence, 0);
  }
  #[inline]
  pub fn add_dt_sec(&mut self, dt_sec: f32) {
    self.fbb_.push_slot::<f32>(PlayerCommands::VT_DT_SEC, dt_sec, 0.0);
  }
  #[inline]
  pub fn add_commands(&mut self, commands: flatbuffers::WIPOffset<flatbuffers::Vector<'b , PlayerCommand>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PlayerCommands::VT_COMMANDS, commands);
  }
  #[inline]
  pub fn add_client_timestamp(&mut self, client_timestamp: f32) {
    self.fbb_.push_slot::<f32>(PlayerCommands::VT_CLIENT_TIMESTAMP, client_timestamp, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PlayerCommandsBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PlayerCommandsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PlayerCommands<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PlayerCommands<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PlayerCommands");
      ds.field("sequence", &self.sequence());
      ds.field("dt_sec", &self.dt_sec());
      ds.field("commands", &self.commands());
      ds.field("client_timestamp", &self.client_timestamp());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `PlayerCommands`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_player_commands_unchecked`.
pub fn root_as_player_commands(buf: &[u8]) -> Result<PlayerCommands, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<PlayerCommands>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `PlayerCommands` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_player_commands_unchecked`.
pub fn size_prefixed_root_as_player_commands(buf: &[u8]) -> Result<PlayerCommands, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<PlayerCommands>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `PlayerCommands` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_player_commands_unchecked`.
pub fn root_as_player_commands_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PlayerCommands<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<PlayerCommands<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `PlayerCommands` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_player_commands_unchecked`.
pub fn size_prefixed_root_as_player_commands_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PlayerCommands<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<PlayerCommands<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a PlayerCommands and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `PlayerCommands`.
pub unsafe fn root_as_player_commands_unchecked(buf: &[u8]) -> PlayerCommands {
  flatbuffers::root_unchecked::<PlayerCommands>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed PlayerCommands and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `PlayerCommands`.
pub unsafe fn size_prefixed_root_as_player_commands_unchecked(buf: &[u8]) -> PlayerCommands {
  flatbuffers::size_prefixed_root_unchecked::<PlayerCommands>(buf)
}
#[inline]
pub fn finish_player_commands_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<PlayerCommands<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_player_commands_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<PlayerCommands<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
